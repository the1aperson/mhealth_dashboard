<?php

namespace common\components;

use yii;
use yii\helpers\Inflector;


class ExportHandler extends yii\base\Component
{
	
	// processExport()
	// This method accepts a common\models\ExportQueue $queueItem, and handles creating the necessary DataExporter $exporter and DataWriter $writer
	// to export the data.
	// The DataExporter and DataWriter are initialized through Yii's createObject method, and class names are inferred from the
	// $queueItem's item_type and export_type values.
	// We receive a DataFormatter from the $exporter by calling $exporter->next(), which then gets passed to the $writer.
	// This process is repeated until $exporter->next() returns null.
	// We then get the list of created files from the $writer, and package them into a zip file.
	// Then, we make any cleanup calls that we need to make, and set the $queueItem to finished.
	
	public function processExport($queueItem)
	{

		$queueItem->markProcessing();
		
		$options = $queueItem->options;
		
		try
		{
			$exporterClassName = Inflector::id2camel($queueItem->item_type, "_");
			$exporterFullClass = 'common\dataExporters' . '\\' . $exporterClassName . "Exporter";
			
			$writerClassName = Inflector::id2camel($queueItem->export_type, "_");
			$writerFullClass = 'common\dataWriters' . '\\' . $writerClassName . "DataWriter";
			
			$exporter = Yii::createObject(['class' => $exporterFullClass, 'queueItem' => $queueItem, 'formatterOptions' => $options]);
			$writer = Yii::createObject(['class' => $writerFullClass]);
			
			$total = $exporter->getTotalQueueCount();
			$current = 0;
			$lastProgressUpdate = null;
			
			while($dataFormatter = $exporter->next())
			{
				$writer->writeData($dataFormatter);	
				$current += 1;

				$currentPercent = $current;
				if($total != 0)
				{
					$currentPercent = round(($current / $total) * 100);					
				}
				
				if($lastProgressUpdate === null || $currentPercent >= ($lastProgressUpdate + 5))
				{
					$lastProgressUpdate = $currentPercent;
					$queueItem->setProgressMessage(strval($currentPercent) . "%");
				}
			}
			
			$writer->finalizeWritingData();
			
			$filepaths = $writer->getFilepaths();
			if(count($filepaths) == 0)
			{
				$queueItem->markError();
				$queueItem->setProgressMessage("No files generated by exporter");
				return;
			}
			
			$zipFilename = $exporter->exportFilename() . ".zip";
			$zipPath = $writer->getTempDirectory() . "/" . $zipFilename;

			if(\common\components\ZipHelper::archiveFiles($filepaths, $zipPath))
			{
				$queueItem->filepath = $zipPath;
				$queueItem->save();
				$queueItem->setProgressMessage("100%");
				$queueItem->markFinished();
			}
			
			$writer->closeFileHandles();			
		}
		catch (\Exception $e)
		{
			$queueItem->markError();
			$queueItem->setProgressMessage($e->getMessage());
			Yii::error("Error exporting job id " . $queueItem->id, 'export-queue');
			Yii::error($e, 'export-queue');
			throw $e;
		}
		
	}
		
		
}
	
?>